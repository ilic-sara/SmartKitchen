@page "/admin/add-method"
@inject MethodApiService MethodApiService
@inject NavigationManager NavigationManager
@inject FileUploadApiService FileUploadApiService
@inject ILogger<AddMethod> Logger
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

<div class="container-fluid my-5">
    <div class="row justify-content-center">
        <div class="col-11 col-md-8">
            <div class="card p-4">
                <EditForm Model="newMethod" OnValidSubmit="HandleValidSubmit" FormName="addMethodForm" class="form-control">
                    <h3 class="text-center my-4">Add new method</h3>
                    <div class="form-floating mb-3">
                        <InputText class="form-control" type="text" @bind-Value="newMethod.Name" placeholder="Name" id="name" />
                        <label for="name">Name: </label>
                        <br />
                    </div>
                    <ImageUpload OnImageUploaded="HandleImageUploaded" />

                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="input-group mb-3 justify-content-center">
                        <button class="btn green-btn" type="submit">Save</button>
                    </div>
                    @if (errorMessage is not null)
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    private Method newMethod = new();
    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        Logger.LogInformation($"Valid Submit - Name: {newMethod.Name}, Picture Url: {newMethod.PictureUrl}");
        try
        {
            await MethodApiService.CreateMethodAsync(newMethod);
            NavigationManager.NavigateTo("/admin/methods");
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while saving the method. Please try again later.";
            Logger.LogError(ex, $"\n{errorMessage}");
        }
    }

    private Task HandleImageUploaded(string imageUrl)
    {
        newMethod.PictureUrl = imageUrl;
        return Task.CompletedTask;
    }
}
