@page "/admin/sign-up"
@inject UserApiService UserApiService
@inject NavigationManager NavigationManager
@inject ILogger<SignUp> Logger
@rendermode InteractiveWebAssembly

<div class="container-fluid my-5">
    <div class="row justify-content-center">
        <div class="col-11 col-md-8">
            <div class="card p-4">
                <EditForm Model="signUpModel" OnValidSubmit="HandleSignUp" FormName="Signup" class="form-control">
                    <h3 class="text-center my-4">Sign up</h3>
                    <div class="form-floating mb-3">
                        <InputText class="form-control" type="text" @bind-Value="signUpModel.Username" id="username" />
                        <label for="username">Username</label>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText class="form-control" @bind-Value="signUpModel.Password" type="password" id="password"/>
                        <label for="password">Password</label>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText class="form-control" @bind-Value="signUpModel.ConfirmPassword" type="password" id="confirm-password"/>
                        <label for="confirm-password">Confirm Password</label>
                    </div>
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="input-group mb-3 justify-content-center">
                        <button class="btn green-btn" type="submit">Sign Up</button>
                    </div>
                    @if (errorMessage is not null)
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private UserSignUpModel signUpModel = new();

    private string? errorMessage;


    private async Task HandleSignUp()
    {
        if (signUpModel.Password != signUpModel.ConfirmPassword)
        {
            errorMessage = "Passwords need to match.";
            return;
        }

        try
        {
            var user = await UserApiService.CreateUserAsync(signUpModel);
            if (user is not null)
                NavigationManager.NavigateTo("/admin");
            else
                throw new NullReferenceException("Sign up failed - user is null.");
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to create account. Please try again.";
            Logger.LogError(ex, $"\n{errorMessage}");
        }
    }

}
